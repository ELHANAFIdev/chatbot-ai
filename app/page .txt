"use client"

import type React from "react"
import { useState, useEffect } from "react"
import {
  X,
  Loader2,
  Send,
  Bot,
  Phone,
  User,
  MapPin,
  Calendar,
  ExternalLink,
  Plus,
  MessageCircle,
  Filter,
  Search,
  Heart,
  Clock,
  CheckCircle,
  Trash2,
  Copy,
  Download,
  BarChart3,
} from "lucide-react"
import SearchForm from "./components/search-form"
import Dashboard from "./components/dashboard"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"

interface Message {
  id: string
  role: "user" | "assistant"
  content: string
  missingPersons?: MissingPerson[]
  timestamp: Date
}

interface MissingPerson {
  id: string
  name?: string
  description: string
  city: string
  category_name?: string
  marque?: string
  modele?: string
  color?: string
  type?: string
  etat?: string
  postdate?: string
  match_count?: number
  contactUrl: string
}

interface ChatHistory {
  id: string
  title: string
  messages: Message[]
  lastUpdated: Date
}

// Component for displaying missing person cards
const MissingPersonCard = ({ person }: { person: MissingPerson }) => {
  const handleContact = () => {
    window.open(person.contactUrl, "_blank", "noopener,noreferrer")
  }

  const handleCopyId = () => {
    navigator.clipboard.writeText(`#${person.id}`)
  }

  return (
    <Card className="w-full mb-4 hover:shadow-lg transition-all duration-300 border-2 border-gray-200 hover:border-red-300">
      <CardHeader className="pb-3">
        <div className="flex justify-between items-start">
          <CardTitle className="text-lg flex items-center">
            <User className="h-5 w-5 mr-2 text-red-600" />
            <span>Objet #{person.id}</span>
            <button
              onClick={handleCopyId}
              className="ml-2 p-1 hover:bg-gray-100 rounded transition-colors"
              title="Copier l'ID"
            >
              <Copy className="h-3 w-3 text-gray-400" />
            </button>
          </CardTitle>
          {person.match_count && <Badge variant="secondary">{person.match_count} correspondances</Badge>}
        </div>
      </CardHeader>
      <CardContent className="space-y-3">
        <div className="flex items-center text-sm text-gray-600">
          <MapPin className="h-4 w-4 mr-2" />
          <span className="font-medium">{person.city}</span>
        </div>

        <div className="text-sm">
          <p className="font-medium text-gray-800 mb-2">Description:</p>
          <p className="text-gray-600 line-clamp-3">{person.description || "Aucune description disponible"}</p>
        </div>

        {(person.category_name || person.marque || person.modele || person.color || person.type || person.etat) && (
          <div className="space-y-1">
            <p className="font-medium text-gray-800 text-sm">Détails:</p>
            <div className="flex flex-wrap gap-2">
              {person.category_name && <Badge variant="outline">Catégorie: {person.category_name}</Badge>}
              {person.marque && <Badge variant="outline">Marque: {person.marque}</Badge>}
              {person.modele && <Badge variant="outline">Modèle: {person.modele}</Badge>}
              {person.color && <Badge variant="outline">Couleur: {person.color}</Badge>}
              {person.type && <Badge variant="outline">Type: {person.type}</Badge>}
              {person.etat && <Badge variant="outline">État: {person.etat}</Badge>}
            </div>
          </div>
        )}

        {person.postdate && (
          <div className="flex items-center text-sm text-gray-500">
            <Calendar className="h-4 w-4 mr-2" />
            <span>Posté le: {new Date(person.postdate).toLocaleDateString()}</span>
          </div>
        )}

        <div className="pt-3 border-t border-gray-200 mt-2">
          <Button
            onClick={handleContact}
            className="w-full bg-green-600 hover:bg-green-700 text-white flex items-center justify-center gap-2 group transition-all duration-300"
          >
            <Phone className="h-4 w-4" />
            Contacter le Trouveur
            <ExternalLink className="h-4 w-4 transition-transform group-hover:translate-x-1" />
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}

// Enhanced AI Chat Modal Component
const AIChatModal = ({ isOpen, onClose }: { isOpen: boolean; onClose: () => void }) => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      role: "assistant",
      content:
        '🤖 **Bienvenue ! Je vais vous aider à rechercher**\n\n• Dites-moi ce que vous avez perdu\n• Exemple: "téléphone Samsung noir"\n• أو بالعربية: "فقدت هاتفي"\n• Or in English: "I lost my phone"\n\n**La ville n\'est plus obligatoire !** 🎉\nPlus de détails = meilleurs résultats !',
      timestamp: new Date(),
    },
  ])
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [chatHistory, setChatHistory] = useState<ChatHistory[]>([])
  const [currentChatId, setCurrentChatId] = useState<string | null>(null)

  // Load chat history from localStorage
  useEffect(() => {
    const savedHistory = localStorage.getItem("mafqoodat-chat-history")
    if (savedHistory) {
      try {
        const parsed = JSON.parse(savedHistory)
        setChatHistory(
          parsed.map((chat: any) => ({
            ...chat,
            lastUpdated: new Date(chat.lastUpdated),
            messages: chat.messages.map((msg: any) => ({
              ...msg,
              timestamp: new Date(msg.timestamp),
            })),
          })),
        )
      } catch (error) {
        console.error("Error loading chat history:", error)
      }
    }
  }, [])

  // Save chat history to localStorage
  const saveChatHistory = (history: ChatHistory[]) => {
    localStorage.setItem("mafqoodat-chat-history", JSON.stringify(history))
    setChatHistory(history)
  }

  // Save current conversation
  const saveCurrentChat = () => {
    if (messages.length <= 1) return

    const chatTitle = messages[1]?.content.slice(0, 50) + "..." || "Nouvelle conversation"
    const chatId = currentChatId || Date.now().toString()

    const newChat: ChatHistory = {
      id: chatId,
      title: chatTitle,
      messages: messages,
      lastUpdated: new Date(),
    }

    const updatedHistory = chatHistory.filter((chat) => chat.id !== chatId)
    updatedHistory.unshift(newChat)

    // Keep only last 10 conversations
    const limitedHistory = updatedHistory.slice(0, 10)
    saveChatHistory(limitedHistory)
    setCurrentChatId(chatId)
  }

  // Load a chat from history
  const loadChat = (chat: ChatHistory) => {
    setMessages(chat.messages)
    setCurrentChatId(chat.id)
  }

  // Clear current chat
  const clearChat = () => {
    setMessages([
      {
        id: "1",
        role: "assistant",
        content:
          '🤖 **Bienvenue ! Je vais vous aider à rechercher**\n\n• Dites-moi ce que vous avez perdu\n• Exemple: "téléphone Samsung noir"\n• أو بالعربية: "فقدت هاتفي"\n• Or in English: "I lost my phone"\n\n**La ville n\'est plus obligatoire !** 🎉\nPlus de détails = meilleurs résultats !',
        timestamp: new Date(),
      },
    ])
    setCurrentChatId(null)
  }

  // Delete a chat from history
  const deleteChat = (chatId: string) => {
    const updatedHistory = chatHistory.filter((chat) => chat.id !== chatId)
    saveChatHistory(updatedHistory)
  }

  // Export chat
  const exportChat = () => {
    const chatData = {
      title: `Conversation Mafqoodat - ${new Date().toLocaleDateString()}`,
      messages: messages,
      exportedAt: new Date().toISOString(),
    }

    const blob = new Blob([JSON.stringify(chatData, null, 2)], { type: "application/json" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `mafqoodat-chat-${Date.now()}.json`
    a.click()
    URL.revokeObjectURL(url)
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!input.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: input,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInput("")
    setIsLoading(true)

    try {
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ messages: [...messages, userMessage] }),
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()

      if (data.error) {
        throw new Error(data.error)
      }

      const assistantMessage: Message = {
        id: data.id || Date.now().toString(),
        role: "assistant",
        content: data.content,
        missingPersons: data.missingPersons || undefined,
        timestamp: new Date(),
      }

      setMessages((prev) => [...prev, assistantMessage])

      // Auto-save after successful response
      setTimeout(() => saveCurrentChat(), 1000)
    } catch (error: any) {
      console.error("Chat error:", error)
      const errorMessage: Message = {
        id: Date.now().toString(),
        role: "assistant",
        content: `❌ **Problème technique**\n\nErreur: ${error.message}\n\n• Réessayez dans quelques instants\n• Vérifiez votre connexion internet`,
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }

  // Handle keyboard shortcuts
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && (e.ctrlKey || e.metaKey)) {
      handleSubmit(e as any)
    }
  }

  const handlePostNewAd = () => {
    const url = "https://mafqoodat.ma/post.php"
    window.open(url, "_blank", "noopener,noreferrer")
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-6xl h-[85vh] flex">
        {/* Sidebar for chat history */}
        <div className="w-80 border-r bg-gray-50 flex flex-col">
          <div className="p-4 border-b bg-gray-100">
            <h3 className="font-semibold text-gray-800 mb-3">Historique des conversations</h3>
            <div className="flex gap-2">
              <Button onClick={clearChat} size="sm" variant="outline" className="flex-1 bg-transparent">
                <Plus className="h-4 w-4 mr-1" />
                Nouveau
              </Button>
              <Button onClick={saveCurrentChat} size="sm" variant="outline">
                <Download className="h-4 w-4" />
              </Button>
            </div>
          </div>

          <div className="flex-1 overflow-y-auto p-2">
            {chatHistory.length === 0 ? (
              <p className="text-gray-500 text-sm text-center mt-4">Aucune conversation sauvegardée</p>
            ) : (
              <div className="space-y-2">
                {chatHistory.map((chat) => (
                  <div
                    key={chat.id}
                    className={`p-3 rounded-lg cursor-pointer transition-colors group ${
                      currentChatId === chat.id ? "bg-red-100 border-red-300" : "bg-white hover:bg-gray-100"
                    }`}
                    onClick={() => loadChat(chat)}
                  >
                    <div className="flex justify-between items-start">
                      <div className="flex-1 min-w-0">
                        <p className="text-sm font-medium text-gray-800 truncate">{chat.title}</p>
                        <p className="text-xs text-gray-500 mt-1">
                          {chat.lastUpdated.toLocaleDateString()} • {chat.messages.length} messages
                        </p>
                      </div>
                      <button
                        onClick={(e) => {
                          e.stopPropagation()
                          deleteChat(chat.id)
                        }}
                        className="opacity-0 group-hover:opacity-100 p-1 hover:bg-red-100 rounded transition-all"
                      >
                        <Trash2 className="h-3 w-3 text-red-500" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* Main chat area */}
        <div className="flex-1 flex flex-col">
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b" style={{ backgroundColor: "#C2252E" }}>
            <div className="flex items-center space-x-3 text-white">
              <MessageCircle className="h-6 w-6" />
              <h2 className="text-xl font-semibold">🤖 Assistant IA - Chat Intelligent</h2>
            </div>
            <div className="flex items-center space-x-2">
              <Button onClick={exportChat} size="sm" variant="ghost" className="text-white hover:bg-red-800">
                <Download className="h-4 w-4" />
              </Button>
              <button onClick={onClose} className="p-2 hover:bg-red-800 rounded transition-colors text-white">
                <X className="h-5 w-5" />
              </button>
            </div>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div key={message.id} className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}>
                <div
                  className={`max-w-4xl ${message.role === "user" ? "text-white px-4 py-3 rounded-lg" : ""}`}
                  style={message.role === "user" ? { backgroundColor: "#C2252E" } : {}}
                >
                  {message.role === "assistant" && (
                    <div className="mb-4">
                      <div className="bg-gray-50 border text-gray-800 px-4 py-3 rounded-lg mb-4">
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center">
                            <Bot className="h-4 w-4 mr-2" style={{ color: "#C2252E" }} />
                            <span className="text-sm font-medium" style={{ color: "#C2252E" }}>
                              Assistant IA
                            </span>
                          </div>
                          <span className="text-xs text-gray-400">{message.timestamp.toLocaleTimeString()}</span>
                        </div>
                        <div className="whitespace-pre-wrap break-words">
                          {message.content.split("\n").map((line, index) => {
                            // Bold formatting
                            if (line.startsWith("**") && line.endsWith("**")) {
                              return (
                                <div key={index} className="font-bold text-lg mb-2" style={{ color: "#C2252E" }}>
                                  {line.slice(2, -2)}
                                </div>
                              )
                            }

                            // Bullet point formatting
                            if (line.startsWith("• ")) {
                              return (
                                <div key={index} className="ml-4 mb-1 text-sm">
                                  {line}
                                </div>
                              )
                            }

                            // Check for "Create Ad" button
                            if (line.includes("[CRÉER_ANNONCE]")) {
                              return (
                                <div
                                  key={index}
                                  className="mt-3 p-3 bg-green-50 rounded-lg border-l-4 border-green-400"
                                >
                                  <button
                                    onClick={handlePostNewAd}
                                    className="inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md text-sm font-medium transition-colors"
                                  >
                                    <Plus className="h-4 w-4 mr-2" />
                                    Créer une annonce
                                  </button>
                                </div>
                              )
                            }

                            return (
                              <div key={index} className="mb-1">
                                {line}
                              </div>
                            )
                          })}
                        </div>
                      </div>

                      {/* Display missing persons cards */}
                      {message.missingPersons && message.missingPersons.length > 0 && (
                        <div className="space-y-4">
                          <div className="text-lg font-semibold text-gray-800 mb-4">
                            🎯 Objets trouvés ({message.missingPersons.length} résultats)
                          </div>
                          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                            {message.missingPersons.map((person) => (
                              <MissingPersonCard key={person.id} person={person} />
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  )}

                  {message.role === "user" && (
                    <div>
                      <div className="whitespace-pre-wrap break-words">{message.content}</div>
                      <div className="text-xs text-red-200 mt-1">{message.timestamp.toLocaleTimeString()}</div>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>

          {/* Input */}
          <div className="border-t p-4 bg-gray-50">
            <form onSubmit={handleSubmit} className="flex space-x-2">
              <input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyDown={handleKeyDown}
                placeholder="Exemple: téléphone Samsung noir | فقدت هاتفي | I lost my phone"
                className="flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2"
                style={{ focusRingColor: "#C2252E" }}
                disabled={isLoading}
              />
              <button
                type="submit"
                disabled={isLoading || !input.trim()}
                className="px-6 py-2 text-white rounded-lg hover:opacity-90 flex items-center space-x-2 disabled:opacity-50 transition-colors"
                style={{ backgroundColor: "#C2252E" }}
              >
                {isLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <Send className="h-4 w-4" />}
                <span>{isLoading ? "Envoi..." : "Envoyer"}</span>
              </button>
            </form>
            <div className="mt-2 flex justify-between items-center">
              <button
                onClick={handlePostNewAd}
                className="text-sm hover:opacity-80 flex items-center space-x-1"
                style={{ color: "#C2252E" }}
              >
                <Plus className="h-4 w-4" />
                <span>Créer une nouvelle annonce</span>
              </button>
              <span className="text-xs text-gray-500">Ctrl+Entrée pour envoyer</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default function HomePage() {
  const [showAIModal, setShowAIModal] = useState(false)
  const [showSearchForm, setShowSearchForm] = useState(false)
  const [showDashboard, setShowDashboard] = useState(false)
  const [stats, setStats] = useState({
    totalItems: 1247,
    foundItems: 892,
    activeUsers: 3456,
    successRate: 72,
  })

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 via-white to-red-50">
      {/* Hero Section */}
      <div
        className="relative overflow-hidden text-white"
        style={{ background: "linear-gradient(135deg, #C2252E 0%, #8B1A1A 100%)" }}
      >
        <div className="absolute inset-0 bg-black opacity-10"></div>
        <div className="relative container mx-auto px-4 py-16">
          <div className="text-center max-w-4xl mx-auto">
            <h1 className="text-5xl font-bold mb-6 leading-tight">Retrouvez vos objets perdus au Maroc</h1>
            <p className="text-xl mb-8 opacity-90">
              La première plateforme marocaine d'objets perdus et trouvés avec intelligence artificielle
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button
                onClick={() => setShowAIModal(true)}
                size="lg"
                className="bg-white hover:bg-gray-100 font-semibold px-8 py-3"
                style={{ color: "#C2252E" }}
              >
                <MessageCircle className="h-5 w-5 mr-2" />
                Rechercher avec l'IA
              </Button>
              <Button
                onClick={() => setShowSearchForm(true)}
                size="lg"
                variant="outline"
                className="border-white text-white hover:bg-white font-semibold px-8 py-3"
                style={{ "--hover-color": "#C2252E" } as React.CSSProperties}
              >
                <Filter className="h-5 w-5 mr-2" />
                Recherche avancée
              </Button>
              <Button
                onClick={() => setShowDashboard(true)}
                size="lg"
                variant="outline"
                className="border-white text-white hover:bg-white font-semibold px-8 py-3"
                style={{ "--hover-color": "#C2252E" } as React.CSSProperties}
              >
                <BarChart3 className="h-5 w-5 mr-2" />
                Tableau de Bord Avancé
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Stats Section */}
      <div className="py-12 bg-white border-b">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
            <div className="text-center">
              <div className="text-3xl font-bold mb-2" style={{ color: "#C2252E" }}>
                {stats.totalItems.toLocaleString()}
              </div>
              <div className="text-gray-600">Objets signalés</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-green-600 mb-2">{stats.foundItems.toLocaleString()}</div>
              <div className="text-gray-600">Objets retrouvés</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-purple-600 mb-2">{stats.activeUsers.toLocaleString()}</div>
              <div className="text-gray-600">Utilisateurs actifs</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-orange-600 mb-2">{stats.successRate}%</div>
              <div className="text-gray-600">Taux de succès</div>
            </div>
          </div>
        </div>
      </div>

      {/* Features Section */}
      <div className="py-16">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-800 mb-4">Comment ça marche ?</h2>
            <p className="text-gray-600 max-w-2xl mx-auto">
              Notre plateforme utilise l'intelligence artificielle pour vous aider à retrouver vos objets perdus
              rapidement et efficacement.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            <Card className="text-center hover:shadow-lg transition-shadow duration-300">
              <CardHeader>
                <div
                  className="w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4"
                  style={{ backgroundColor: "#C2252E20" }}
                >
                  <MessageCircle className="h-8 w-8" style={{ color: "#C2252E" }} />
                </div>
                <CardTitle className="text-xl">Chat IA Intelligent</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600">
                  Décrivez votre objet perdu en français, arabe ou anglais. Notre IA comprend et recherche
                  automatiquement. **La ville n'est plus obligatoire !**
                </p>
              </CardContent>
            </Card>

            <Card className="text-center hover:shadow-lg transition-shadow duration-300">
              <CardHeader>
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Search className="h-8 w-8 text-green-600" />
                </div>
                <CardTitle className="text-xl">Recherche Avancée</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600">
                  Filtrez par ville, catégorie, marque et autres critères pour des résultats précis.
                </p>
              </CardContent>
            </Card>

            <Card className="text-center hover:shadow-lg transition-shadow duration-300">
              <CardHeader>
                <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <BarChart3 className="h-8 w-8 text-purple-600" />
                </div>
                <CardTitle className="text-xl">Tableau de Bord</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600">
                  Visualisez les statistiques en temps réel avec des graphiques interactifs des objets perdus et
                  retrouvés.
                </p>
              </CardContent>
            </Card>

            <Card className="text-center hover:shadow-lg transition-shadow duration-300">
              <CardHeader>
                <div className="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Clock className="h-8 w-8 text-orange-600" />
                </div>
                <CardTitle className="text-xl">Réponse Rapide</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600">
                  Recevez des résultats instantanés et contactez directement les personnes qui ont trouvé vos objets.
                </p>
              </CardContent>
            </Card>

            <Card className="text-center hover:shadow-lg transition-shadow duration-300">
              <CardHeader>
                <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Heart className="h-8 w-8 text-red-600" />
                </div>
                <CardTitle className="text-xl">Service Gratuit</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600">
                  Tous nos services sont entièrement gratuits. Aidez et soyez aidé sans frais.
                </p>
              </CardContent>
            </Card>

            <Card className="text-center hover:shadow-lg transition-shadow duration-300">
              <CardHeader>
                <div className="w-16 h-16 bg-teal-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <CheckCircle className="h-8 w-8 text-teal-600" />
                </div>
                <CardTitle className="text-xl">Vérification</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600">
                  Système de vérification pour assurer la sécurité et l'authenticité des annonces.
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* CTA Section */}
      <div className="py-16 text-white" style={{ background: "linear-gradient(135deg, #C2252E 0%, #8B1A1A 100%)" }}>
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold mb-4">Prêt à retrouver vos objets ?</h2>
          <p className="text-xl mb-8 opacity-90">Commencez dès maintenant votre recherche ou aidez quelqu'un d'autre</p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button
              onClick={() => setShowAIModal(true)}
              size="lg"
              className="bg-white hover:bg-gray-100 font-semibold px-8 py-3"
              style={{ color: "#C2252E" }}
            >
              <Search className="h-5 w-5 mr-2" />
              Commencer la recherche
            </Button>
            <Button
              onClick={() => window.open("https://mafqoodat.ma/post.php", "_blank")}
              size="lg"
              variant="outline"
              className="border-white text-white hover:bg-white font-semibold px-8 py-3"
              style={{ "--hover-color": "#C2252E" } as React.CSSProperties}
            >
              <Plus className="h-5 w-5 mr-2" />
              Publier une annonce
            </Button>
          </div>
        </div>
      </div>

      {/* Floating Action Buttons */}
      <div className="fixed bottom-6 right-6 z-40 space-y-3">
        <button
          onClick={() => setShowAIModal(true)}
          className="text-white p-4 rounded-full shadow-lg transition-all duration-300 hover:scale-105 flex items-center space-x-2 group"
          style={{ backgroundColor: "#C2252E" }}
          title="Chat avec l'Assistant IA"
        >
          <MessageCircle className="h-6 w-6" />
          <span className="hidden group-hover:inline-block whitespace-nowrap pr-2">Chat IA</span>
        </button>

        <button
          onClick={() => setShowSearchForm(true)}
          className="bg-green-600 hover:bg-green-700 text-white p-4 rounded-full shadow-lg transition-all duration-300 hover:scale-105 flex items-center space-x-2 group"
          title="Recherche Avancée avec Filtres"
        >
          <Filter className="h-6 w-6" />
          <span className="hidden group-hover:inline-block whitespace-nowrap pr-2">Filtres</span>
        </button>

        <button
          onClick={() => setShowDashboard(true)}
          className="bg-purple-600 hover:bg-purple-700 text-white p-4 rounded-full shadow-lg transition-all duration-300 hover:scale-105 flex items-center space-x-2 group"
          title="Tableau de Bord et Statistiques"
        >
          <BarChart3 className="h-6 w-6" />
          <span className="hidden group-hover:inline-block whitespace-nowrap pr-2">Stats</span>
        </button>
      </div>

      {/* AI Chat Modal */}
      <AIChatModal isOpen={showAIModal} onClose={() => setShowAIModal(false)} />

      {/* Advanced Search Modal */}
      {showSearchForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl h-[80vh] flex flex-col">
            <div
              className="flex items-center justify-between p-4 border-b text-white rounded-t-lg"
              style={{ backgroundColor: "#C2252E" }}
            >
              <div className="flex items-center space-x-3">
                <Filter className="h-6 w-6" />
                <h2 className="text-xl font-semibold">🔍 Recherche Avancée avec Filtres</h2>
              </div>
              <button
                onClick={() => setShowSearchForm(false)}
                className="p-2 hover:bg-red-800 rounded transition-colors"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            <div className="flex-1 overflow-hidden">
              <SearchForm onClose={() => setShowSearchForm(false)} />
            </div>
          </div>
        </div>
      )}

      {/* Dashboard Modal */}
      {showDashboard && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-7xl h-[90vh] flex flex-col">
            <div
              className="flex items-center justify-between p-4 border-b text-white rounded-t-lg"
              style={{ backgroundColor: "#C2252E" }}
            >
              <div className="flex items-center space-x-3">
                <BarChart3 className="h-6 w-6" />
                <h2 className="text-xl font-semibold">📊 Tableau de Bord Avancé - Statistiques Détaillées</h2>
              </div>
              <button
                onClick={() => setShowDashboard(false)}
                className="p-2 hover:bg-red-800 rounded transition-colors"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            <div className="flex-1 overflow-y-auto p-6">
              <Dashboard />
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
